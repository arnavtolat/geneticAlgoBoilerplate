import random

# Class representing an item
class Item:
    def __init__(self, weight, value):
        self.weight = weight
        self.value = value

# Function to create a random item
def create_item():
    weight = random.randint(1, 20)
    value = random.randint(1, 100)
    return Item(weight, value)

# Function to create an initial population
def create_population(size, item_count):
    return [[random.randint(0, 1) for _ in range(item_count)] for _ in range(size)]

# Function to calculate the fitness of an individual
def fitness_function(individual, items, weight_limit):
    total_value = 0
    total_weight = 0
    for i in range(len(individual)):
        if individual[i] == 1:
            total_value += items[i].value
            total_weight += items[i].weight
    if total_weight > weight_limit:
        return 0
    else:
        return total_value

# Function to evaluate the fitness of each individual in the population
def evaluate_population(population, items, weight_limit):
    return [fitness_function(individual, items, weight_limit) for individual in population]

# Function to perform selection using tournament selection
def tournament_selection(population, scores, k=3):
    selected_indices = random.sample(range(len(population)), k)
    selected_fitness = [scores[i] for i in selected_indices]
    winner_index = selected_indices[selected_fitness.index(max(selected_fitness))]
    return population[winner_index]

# Function to perform crossover between two individuals
def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)
    child1 = parent1[:crossover_point] + parent2[crossover_point:]
    child2 = parent2[:crossover_point] + parent1[crossover_point:]
    return child1, child2

# Function to perform mutation on an individual
def mutate(individual, mutation_rate):
    mutated_individual = []
    for gene in individual:
        if random.random() < mutation_rate:
            mutated_individual.append(1 - gene)  # Flip the bit
        else:
            mutated_individual.append(gene)
    return mutated_individual

# Genetic algorithm function
def genetic_algorithm(item_count, population_size, mutation_rate, generations, weight_limit):
    items = [create_item() for _ in range(item_count)]
    population = create_population(population_size, item_count)

    for _ in range(generations):
        scores = evaluate_population(population, items, weight_limit)
        new_population = []

        while len(new_population) < population_size:
            parent1 = tournament_selection(population, scores)
            parent2 = tournament_selection(population, scores)
            child1, child2 = crossover(parent1, parent2)
            mutated_child1 = mutate(child1, mutation_rate)
            mutated_child2 = mutate(child2, mutation_rate)
            new_population.append(mutated_child1)
            new_population.append(mutated_child2)

        population = new_population

    best_individual = population[scores.index(max(scores))]
    best_fitness = max(scores)
    return best_individual, best_fitness

# Example usage
best_solution, best_fitness = genetic_algorithm(item_count=20, population_size=100, mutation_rate=0.1, generations=100, weight_limit=50)

print("Best Solution:", best_solution)
print("Best Fitness:", best_fitness)
